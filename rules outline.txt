\section{How does a DeduceIt assignment work?}

We start with some useful background information about term rewrite systems which some readers may find necessary to understand DeduceIt, then we present an overview of DeduceIt's two primary assignment interfaces: creation and completion.

\subsection{Term Rewriting Systems}

DeduceIt uses a term rewriting system to verify student derivations. In general, rewriting systems consist of a set of objects and relations which define transformations on those objects. Each such transformation is called a rewrite rule. A term rewriting system is a rewriting system which operates on expressions with nested sub-expressions.

Term rewrite rules define transformations which occur between terms. The left hand side of a rule must match the entire term for a rule to be applied. For example, in a language which supports integers, symbols, and the binary operators $+$, $-$, and $=$ (this happens to be a subset of the default DeduceIt language), one such rule might be: $x+y=z \larrow x=z-y$. The system can apply this rule to the expression $x+1=y$ to produce $x=y-1$.

While DeduceIt's derivation checker operates primarily as a term rewriting system, it differs from a standard system in several respects. First, DeduceIt supports equality in rewrites, where specified by an instructor. Rewrite rules which assume equality can be applied recursively upon term subexpressions; the entire term need not match the rule, but only a subexpression of that term. This makes DeduceIt more efficient at verifying certain common derivations. Second, DeduceIt supports the dynamic evaluation of basic mathematical expressions. For instance, if DeduceIt is provided with a set of rules which govern basic algebra and the expression $1+x=3$, it can derive $x=2$ by using the dynamic rule $integer-integer \larrow eval(integer-integer)$.

\subsection{Assignment Creation}

The assignment creation page is the most complex portion of DeduceIt's interface. To create an assignment, an instructor must specify four things: 
  \begin{enumerate}
  \item A rewrite language: DeduceIt provides every assignment with a default rewrite language composed of variables, symbols, integers, and several common unary and binary operators. In many assignment domains this will be sufficient, but an instructor may optionally augment the language with extra syntax for functions and constants. 
  \item The Rulesets: These are named sets of expression transformations---rewrite rules---which the assignment considers valid. One ruleset corresponds to many underlying rewrite rules. This is necessary because an instructor may want to refer to several rewrite rules by the same name (e.g. 1*X -> X and X*1 -> X are two distinct rewrite rules which both describe the multiplicative identity.)
  \item The given expression(s): A set of expressions which serve as the starting point of a derivation.
  \item The goal expression: The desired result of a derivation.
  \end{enumerate}

A student works through an assignment by starting from the given expression terms and applying valid transformations until she has reached the goal expression.

\subsubsection{The Language}

DeduceIt's default language is familiar to anyone who has used an advanced calculator. It ships with the unary operators OPERATORS and the binary operators OPERATORS, which we list in order of precedence. DeduceIt also supports variables (these are used only by an instructor to define rewrite rules), symbols, and integers. Several valid expressions in the default language language are: $X,X=>P$, $a.b.b.a$, and $x+2=y$. Note that the operators used in these expressions have no meaning in themselves without an accompanying set of rules; they simply dictate the construction of an expression parse tree.

Instructors may add two kinds of syntax to DeduceIt's standard rewrite language: constants and variable argument functions. This is convenient in many domains, where familiarly named functions and constants enhance the readability of an assignment. For these custom functions and constants DeduceIt adopts a notation inspired by latex. Constants appear in the language as a symbol value preceded by a backslash, e.g '\e'. Functions look much the same, except they have arguments which they accept in brackets, e.g. '\sin{x}'. Figure 0 shows DeduceIt's custom syntax creation view.


\subsubsection{Rulesets}

Rulesets are the most complicated part of an assignment. They define the sets of valid transformations which a student may use in a derivation. Each ruleset has a name, a student-facing description, a set of rewrite rules, and an optional set of constraints. These constraints may be defined on the variable terms used in the ruleset. They operate in a manner similar to conditional rewrite rules, but are somewhat less general; we use only the condition of containment---whether a variable contains certain other terms---as a condition on ruleset application.

Each rewrite rule in a ruleset is either a strict rewrite rule or an equality. To apply a strict rewrite rule, its left side must match exactly on an expression, wheres an equality may be applied to an expression or any of its subexpressions. Take as an example the expression $1+x*x=5$ and the strict rewrite rule $x*x \larrow x^2$; here the rewrite rule cannot be applied, since its left side doesn't bind with the expression. However, a similar rewrite rule which has been defined with an assumption of equality will bind on $x*x$ and produce the transformation $1+x^2=5$. In this way equalities are more powerful than strict rewrite rules, and for many assignments a single equality can take the place of many traditional rewrite rules. This eases the burden on an instructor and usually speeds up proof search; the more rules an assignment has, the slower search tends to be.

A ruleset may also be either ``required" or ``free." While a required ruleset must be named explicitly when a student uses it in a derivation, a ``free" ruleset may be elided. Behind the scenes, DeduceIt will attempt to fill in such "free" steps automatically through proof search. This is useful when a student must use ``trivial" transformations which are necessary to the derivation but unimportant to the assignment. For example, a student may want to rearrange terms in a mathematical expression as part of some broader rule application. DeduceIt's ``free" rules allow the student to skip over these steps.  

In figure 0 we show DeduceIt's Ruleset creation view.

\subsection{Assignment Completion}

